<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.secureskytech.javabeginner2017</groupId>
  <artifactId>sample-httpserver</artifactId>
  <version>1.0.0</version>
  <packaging>jar</packaging>

  <name>sample-httpserver</name>
  <description>Netty based Sample HTTP Server</description>
  <url>https://github.com/SecureSkyTechnology/study-java-beginner-2017</url>

  <organization>
    <name>Secure Sky Technology, Inc.</name>
    <url>https://www.securesky-tech.com/</url>
  </organization>

  <properties>
    <!-- see : https://maven.apache.org/general.html#encoding-warning  -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <java.version.source>1.8</java.version.source>
    <java.version.target>1.8</java.version.target>
    <java.compiler.debug>true</java.compiler.debug>
    <exec.mainClass>com.secureskytech.javabeginner2017.sample.httpserver.Main</exec.mainClass>
  </properties>

  <dependencies>

    <dependency>
      <groupId>io.netty</groupId>
      <artifactId>netty-all</artifactId>
      <version>4.1.42.Final</version>
    </dependency>

    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <version>20.0</version>
    </dependency>

    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>1.2.3</version>
      <!-- NOTE : To add original appender, we need logback-classic at compile time.
      <scope>runtime</scope>
       -->
    </dependency>

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.13.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.6.1</version>
        <configuration>
          <source>${java.version.source}</source>
          <target>${java.version.target}</target>
          <encoding>${project.build.sourceEncoding}</encoding>
          <debug>${java.compiler.debug}</debug>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>3.1.0</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <createDependencyReducedPom>false</createDependencyReducedPom>
              <transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <manifestEntries>
                    <Main-Class>${exec.mainClass}</Main-Class>
                    <X-Compile-Source-JDK>${java.version.source}</X-Compile-Source-JDK>
                    <X-Compile-Target-JDK>${java.version.target}</X-Compile-Target-JDK>
                    <Specification-Title>${project.name}</Specification-Title>
                    <Specification-Version>${project.version}</Specification-Version>
                  </manifestEntries>
                </transformer>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ApacheLicenseResourceTransformer" />
              </transformers>
              <filters>
                <filter>
                  <!-- NOTE : Bouncy Castle jar file contains META-INF/BCKEY.(DSA|SF) files, which cause
                  'A JNI error has occurred, please check your installation and try again' +
                  'Exception in thread "main" java.lang.SecurityException: Invalid signature file digest for Manifest main attributes'
                  errors.
                  -> filter-out these files, then works fine. (But is this good way in security perspective ... ?? )
                  ref:
                  https://stackoverflow.com/questions/22566191/exception-in-thread-main-java-lang-securityexception-invalid-signature-file-d
                  https://stackoverflow.com/questions/30199035/how-can-i-tell-which-signed-jar-is-causing-maven-shade-plugin-to-fail
                  https://stackoverflow.com/questions/999489/invalid-signature-file-when-attempting-to-run-a-jar
                  https://stackoverflow.com/questions/43201230/create-dependency-folder-with-dependent-jars-with-maven-shade-plugin
                  https://gist.github.com/leewin12/6505726
                  # ooooooooops... lot of "SO" threads ... X(
                  -->
                  <artifact>*:*</artifact>
                  <excludes>
                    <exclude>META-INF/*.SF</exclude>
                    <exclude>META-INF/*.DSA</exclude>
                    <exclude>META-INF/*.RSA</exclude>
                  </excludes>
                </filter>
              </filters>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.6.0</version>
        <configuration>
            <mainClass>${exec.mainClass}</mainClass>
        </configuration>
      </plugin>

    </plugins>
  </build>

</project>
